import pygame as pg
from pygame.locals import *
from configs import *

def DrawTree(screen, tree):
    for point in tree.points:
        pg.draw.circle(screen, GREY, point, 2)
        if point in tree.parent:
            if tree.parent[point] != None:
                pg.draw.aaline(screen, GREY, point, tree.parent[point])

def DrawPath(screen, path, color):
    for i in range(len(path)-1):
            pg.draw.aaline(screen, color, path[i], path[i+1])

def UpdateScreen(screen, start, goal, BigObstaclePos, obstacles, FlagS_RRT, results):
    screen.fill(WHITE)
    
    # Draw start, goal and obstacles
    pg.draw.circle(screen, RED, start, 10)
    pg.draw.circle(screen, RED, goal, 10)
    pg.draw.circle(screen, RED, BigObstaclePos[0], 10)
    for obstacle in obstacles:
        pg.draw.circle(screen, BLACK, obstacle, OBSTACLES_RADIUS)
    
    [trajectory, tree, path, ModifiedPath, TraditionalTree, TraditionalPath] = results
    if FlagS_RRT:
        # Draw results generated by S-RRT
        DrawTree(screen, tree)
        DrawPath(screen, path, GREEN)
        DrawPath(screen, ModifiedPath, RED)
        for point in ModifiedPath:
                pg.draw.circle(screen, RED, point, 4)
        DrawPath(screen, trajectory, BLUE)
    else:
        # Draw results generated by Traditional RRT
        DrawTree(screen, TraditionalTree)
        DrawPath(screen, TraditionalPath, GREEN)

    pg.display.flip()